using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#region Additional Namespaces
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
#endregion

namespace NorthwindSystem.Entities
{
    //anontations are used to assist EntityFramework in the mapping of your class to the SQL table
    //anontations for properties are placed BEFORE the property
    [Table("Products")]
    public class Product
    {
        //private data member
        private string _QuantiyPerUnit;

        //if you use the same name as the SQL attribute for your property name, order of properties does not matter
        //if your names are different then order is required

        //[Key] single attribute primary, identity key
        //[Key, Column(Order=n)] compound primary key, required in front of each property, and represents the physical
        //          order as found on the SQL table
        //[Key, DatabaseGenerated(DatabaseGenerateOption.xxxx)]
        //  .xxxx -> Identity: primary key on SQL in an Identity key (default)
        //           None: primary key is NOT identity, user entered

        //DatabaseGenerated(DatabaseGenerateOption.Compute)] can also be used on a property that is  NOT a primary key
        //Compute: the attribute is a SQL computed attribute
        //      which means that NO actual data is stored in the SQL table, it is generated by the expression in the 
        //      SQL table

        //Example): SQL Table has an attribute called Total which is calculated by two other attributes on the table 
        //      called Quantity and Price
        //[Key, DatabaseGenerated(DatabaseGenerateOption.Identiy)]
        //public decimal Total { get; set; }

        //could have also been coded as:  
        //[Key, DatabaseGenerated(DatabaseGenerateOption.Identiy)]
        [Key]
        
        public int ProductID { get; set; }

        //validation anontations
        [Required(ErrorMessage ="Product name is required")]
        [StringLength(40,MinimumLength =1, ErrorMessage ="Product name is limited to 40 characters")]

        public string ProductName { get; set; }

        //this foreign key is nullable on the SQL table (don't forget the ?)
        //you may be tempted to use the [ForeignKey] annotation BUT DON'T
        //the [ForeignKey] annotation is ONLY required if the SQL table does not use the same name for its
        //      foreign key as its parent primary key
        //OR
        // if your property name does not match the SQL attribute name
        public int? SupplierID { get; set; }
        public int? CategoryID { get; set; }

        //nullable string?
        //you can still fully implement a nullable string property
        [StringLength(20, ErrorMessage = "Product name is limited to 20 characters")]
        public string QuantityPerUnit
        { 
            get { return _QuantiyPerUnit; }
            set { _QuantiyPerUnit = string.IsNullOrEmpty(value) ? null : value; }
        }

        //money requires the use of decimal, if it complains use double 
        //unit price is nullable 
        //nullable numerics DO NOT need to be fully implemented 
        [Range(0.00, double.MaxValue, ErrorMessage ="Unit price is 0.00 or more")]
        public decimal? UnitPrice { get; set;  }

        [Range(0, 32767, ErrorMessage = "Units in stock is 0 or more")]
        public Int16? UnitsInStock { get; set; }


        [Range(0, 32767, ErrorMessage = "Units in order is 0 or more")]
        public Int16? UnitsOnOrder { get; set; }


        [Range(0, 32767, ErrorMessage = "Reorder level is 0 or more")]
        public Int16? ReorderLevel { get; set; }


        public bool Discontinued { get; set; }

        //Read-only property that are setup in your class to make programming easier
        //example): An Address
        //FullAddress = Street + " " + City + " " + Province + " " + PostalCode;
        //these types of properties do not contain data for the SQL table
        //a NotMapped property in your entity class is a property that has NO coresponding SQL table attribute


        [NotMapped]
        public string NameAndID
        {
            get { return ProductName + "(" + ProductID + ")"; }
            set { }
        }

    }
}
